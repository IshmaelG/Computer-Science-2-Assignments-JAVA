package addressbook;

public class AddressBookTree<T extends Comparable<T>,U> 
{
	private Node<T,U> n = new Node<T,U>();
	private Node<T,U> root = n;
	
	
	public AddressBookTree()
	{
		root.parent = n;
		root.left = n;
		root.right = n;
	}
	
	private void insert(T name, U office)
	{
	}
	
	private void insertfix(Node x)
	{
	}
	
	private void delete(T name)
	{
		
	}
	
	private void deletefix(Node x)
	{
		
	}
	
	private void rotate(Node x)
	{
		
	}
	
	private void transplant(Node x, Node y)
	{
		
	}
	
	private void display()
	{
		
	}
	
	private int countBlack()
	{
		return 0;
	}
	
	private int countRed()
	{
		return 0;
	}

}

class Node<T extends Comparable<T>,U> 
{
    public static final int B = 0;
    public static final int R = 1;
	// the key of each node
	public T name;
	public U  office;

    Node<T, U> parent;
    Node<T, U> left;
    Node<T, U> right;
    // the color of a node
    public int color;

    Node()
    {
        color = B;
        numLeft = 0;
        numRight = 0;
        parent = null;
        left = null;
        right = null;
    }

	// Constructor which sets key to the argument.
	Node(T name, U office)
	{
        this();
        this.name = name;
        this.office = office;
	}
}